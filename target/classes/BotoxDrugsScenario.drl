package co.pextra.botox;

import java.util.List;

import br.ufes.inf.lprm.scene.model.impl.Situation;
import br.ufes.inf.lprm.scene.util.SituationHelper;
import br.ufes.inf.lprm.situation.annotations.part;
import br.ufes.inf.lprm.situation.model.events.*;

declare temperatureSituation extends Situation
    data: Data @part
    transactions: List @part
end

rule "More than 10 transactions in an hour from one client"
@role(situation)
@type(TemperatureSituation)
    when
     data : Data()
     transactions: List(size > 10) from accumulate(
        transaction: TempRiseActivity(temperature == data.getTemperature()) over window:time (2m),
        collectList(transaction)
     )
     then
        SituationHelper.situationDetected(drools);
end

rule "More than 1 transaction of 200 dollars in an hour from the same client"
@role(situation)
@type(TemperatureSituation)
    when
      data : Data()
      transactions: List(size > 1) from accumulate(
        transaction: TempRiseActivity(temperature == data.getTemperature(), sensor_id == 1) over window:time (2m),
        collectList(transaction)
      )
    then
      SituationHelper.situationDetected(drools);
end


rule "More than 10 transactions in an hour from small client portal"
@role(situation)
@type(TemperatureSituation)
    when
      data : Data()
      transactions: List(size > 10) from accumulate(
        transaction: TempRiseActivity(temperature == data.getTemperature()) over window:time (2m) from entry-point "low temperature",
        collectList(transaction)
      )
    then
      SituationHelper.situationDetected(drools);
end


rule "More than 100 transactions in an hour from big client portal"
@role(situation)
@type(TemperatureSituation)
    when
      data : Data()
      transactions: List(size > 100) from accumulate(
        transaction: TempRiseActivity(temperature == data.getTemperature()) over window:time (2m) from entry-point "high temperature",
        collectList(transaction)
      )
    then
      SituationHelper.situationDetected(drools);
end

rule "More than 3 suspicious cases in the day and we warn the owner"
    when
      d: Data()
      temperatureSituation: List(size > 3) from accumulate (
        Activation($sit: situation, $sit isA TemperatureSituation.class, ((TemperatureSituation) $sit).data == d ) over window:time (2m);
        collectList($sit)
      )
     then
       System.out.println("WARNING! " + d.getTemperature());
end

/*rule "StartProccess"
    when
    	$sit: TemperatureSituation()
    then
        //Dispara processo.
end

declare YellowFever extends Situation
	person: Person @part
	fevers: List @part
end

rule "StartProccess"
@role(situation)
@type(YellowFever)
    when
      person: Person() 	
      fevers: List(size > 3) from accumulate (
        Activation($sit: situation, $sit isA Fever.class, ((Fever) $sit).person == person ) over window:time (1d);
        collectList($sit)
      )
    then
        //Dispara processo.
end*/